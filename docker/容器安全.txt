1. 对于使用容器的用户，我们主要可以从这两个方面来考虑容器安全问题：
第一是赋予容器合理的 capabilities，第二是在容器中以非 root 用户来运行程序。

2. docker启动时，如果配置了 privileged 的参数的话，就会获取所有的capabilities

3. Linux capabilities出现之前，分为特权用户和非特权用户。
特权用户进程可以执行 Linux 系统上的所有操作，而非特权用户在执行某些操作的时候就会被内核限制执行。
其实这个概念，也是我们通常对 Linux 中 root 用户与非 root 用户的理解。
从 kernel 2.2 开始，Linux 把特权用户所有的这些“特权”做了更详细的划分，这样被划分出来的每个单元就被称为 capability。
参考 https://man7.org/linux/man-pages/man7/capabilities.7.html
可以用uname -a查看内核版本号

4. 对于任意一个进程，在做任意一个特权操作的时候，都需要有这个特权操作对应的 capability。
比如说，运行 iptables 命令，对应的进程需要有 CAP_NET_ADMIN 这个 capability。
如果要 mount 一个文件系统，那么对应的进程需要有 CAP_SYS_ADMIN 这个 capability。
CAP_SYS_ADMIN 这个 capability 里允许了大量的特权操作，包括文件系统，交换空间，还有对各种设备的操作，以及系统调试相关的调用等等。
可以借助capsh工具为用户设置capability : https://man7.org/linux/man-pages/man1/capsh.1.html

5. 这里你只要记住最重要的一点，文件中可以设置 capabilities 参数值，并且这个值会影响到最后运行它的进程。
比如，我们如果把 iptables 的应用程序加上 CAP_NET_ADMIN 的 capability，那么即使是非 root 用户也有执行 iptables 的权限了。

6.  docker run --name iptables --cap-add NET_ADMIN -it registry/iptables:v1 bash
因为容器中的权限越高，对系统安全的威胁显然也是越大的。
比如说，如果容器中的进程有了 CAP_SYS_ADMIN 的特权之后，那么这些进程就可以在容器里直接访问磁盘设备，直接可以读取或者修改宿主机上的所有文件了。
所以，在容器平台上是基本不允许把容器直接设置为"privileged"的，我们需要根据容器中进程需要的最少特权来赋予 capabilities。