1. v1.4 版本之后，k8s社区才逐步设计出了一个用来描述离线业务的 API 对象，它的名字就是：Job。这种业务在计算完成后就直接退出了。

2. 例子job_demo.yaml
kubectl apply -f job_demo.yaml 
kubectl describe jobs/pi
可以看到，这个 Job 对象在创建后，它的 Pod 模板，被自动加上了一个 controller-uid=< 一个随机字符串 > 这样的 Label。而这个 Job 对象本身，则被自动加上了这个 Label 对应的 Selector，从而 保证了 Job 与它所管理的 Pod 之间的匹配关系。而 Job Controller 之所以要使用这种携带了 UID 的 Label，就是为了避免不同 Job 对象所管理的 Pod 发生重合。需要注意的是，这种自动生成的 Label 对用户来说并不友好，所以不太适合推广到 Deployment 等长作业编排对象上。

接下来，我们可以看到这个 Job 创建的 Pod 进入了 Running 状态，这意味着它正在计算 Pi 的值:
$ kubectl get pods
NAME                                READY     STATUS    RESTARTS   AGE
pi-rq5rl                            1/1       Running   0          10s

几分钟后计算结束，这个 Pod 就会进入 Completed 状态:
$ kubectl get pods
NAME                                READY     STATUS      RESTARTS   AGE
pi-rq5rl                            0/1       Completed   0          4m

这也是我们需要在 Pod 模板中定义 restartPolicy=Never 的原因：离线计算的 Pod 永远都不应该被重启，否则它们会再重新计算一遍。

在log中查看job的处理结果：
$ kubectl logs pi-rq5rl
3.141592653589793238462643383279...

在这个例子中定义了 restartPolicy=Never，如果离线作业失败后 Job Controller 就会不断地尝试创建一个新 Pod。
我们就在 Job 对象的 spec.backoffLimit 字段里定义了重试次数为 4（即，backoffLimit=4），而这个字段的默认值是 6。
spec:
 backoffLimit: 4
 activeDeadlineSeconds: 100
 后一个字段表示超过100秒则终止。



 3. Job Controller 对并行作业的控制方法。
 在 Job 对象中，负责并行控制的参数有两个：
 spec.parallelism，它定义的是一个 Job 在任意时间最多可以启动多少个 Pod 同时运行；默认值为1.
 spec.completions，它定义的是 Job 至少要完成的 Pod 数目，即 Job 的最小完成数。默认值为1.
 例子：job_demo2.yaml

 首先，Job Controller 控制的对象，直接就是 Pod。
 其次，Job Controller 在控制循环中进行的调谐（Reconcile）操作，是根据实际在 Running 状态 Pod 的数目、已经成功退出的 Pod 的数目，以及 parallelism、completions 参数的值共同计算出在这个周期里，应该创建或者删除的 Pod 数目，然后调用 Kubernetes API 来执行这个操作。

 Job Controller 实际上控制了，作业执行的并行度，以及总共需要完成的任务数这两个重要参数。而在实际使用时，你需要根据作业的特性，来决定并行度（parallelism）和任务数（completions）的合理取值。

 4. cronjob
 没错，CronJob 与 Job 的关系，正如同 Deployment 与 ReplicaSet 的关系一样。CronJob 是一个专门用来管理 Job 对象的控制器。只不过，它创建和删除 Job 的依据，是 schedule 字段定义的、一个标准的Unix Cron格式的表达式。可以实现定时任务。
 比如，"*/1 * * * *"。这个 Cron 表达式里 */1 中的 * 表示从 0 开始，/ 表示“每”，1 表示偏移量。所以，它的意思就是：从 0 开始，每 1 个时间单位执行一次。那么，时间单位又是什么呢？Cron 表达式中的五个部分分别代表：分钟、小时、日、月、星期。所以，上面这句 Cron 表达式的意思是：从当前开始，每分钟执行一次。

 由于定时任务的特殊性，很可能某个 Job 还没有执行完，另外一个新 Job 就产生了。这时候，你可以通过 spec.concurrencyPolicy 字段来定义具体的处理策略。
 concurrencyPolicy=Allow，这也是默认情况，这意味着这些 Job 可以同时存在；
 concurrencyPolicy=Forbid，这意味着不会创建新的 Pod，该创建周期被跳过；
 concurrencyPolicy=Replace，这意味着新产生的 Job 会替换旧的、没有执行完的 Job。