1. Operator
在 Kubernetes 生态中，还有一个相对更加灵活和编程友好的管理“有状态应用”的解决方案，它就是：Operator。

2. Operator使用步骤
1) 克隆对应的operator
$ git clone https://github.com/coreos/etcd-operator

2) 部署
a. 执行脚本
$ example/rbac/create_role.sh
这个脚本的作用，就是为 Etcd Operator 创建 RBAC 规则。
这是因为，Etcd Operator 需要访问 Kubernetes 的 APIServer 来创建对象。

Etcd Operator 本身，其实就是一个 Deployment：

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: etcd-operator
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: etcd-operator
    spec:
      containers:
      - name: etcd-operator
        image: quay.io/coreos/etcd-operator:v0.9.2
        command:
        - etcd-operator
        env:
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
...

所以，我们就可以使用上述的 YAML 文件来创建 Etcd Operator：
$ kubectl create -f example/deployment.yaml

而一旦 Etcd Operator 的 Pod 进入了 Running 状态，你就会发现，有一个 CRD 被自动创建了出来：

$ kubectl get pods
NAME                              READY     STATUS      RESTARTS   AGE
etcd-operator-649dbdb5cb-bzfzp    1/1       Running     0          20s

$ kubectl get crd
NAME                                    CREATED AT
etcdclusters.etcd.database.coreos.com   2018-09-18T11:42:55Z

你可以通过 kubectl describe 命令看到它的细节：
$ kubectl describe crd  etcdclusters.etcd.database.coreos.com
...
Group:   etcd.database.coreos.com
  Names:
    Kind:       EtcdCluster
    List Kind:  EtcdClusterList
    Plural:     etcdclusters
    Short Names:
      etcd
    Singular:  etcdcluster
  Scope:       Namespaced
  Version:     v1beta2
  
...

可以看到，这个 CRD 相当于告诉了 Kubernetes：接下来，如果有 API 组（Group）是
etcd.database.coreos.com、API 资源类型（Kind）是“EtcdCluster”的 YAML 文件被提交上来，你可一定要认识啊。

而当 Etcd Operator 部署好之后，接下来在这个 Kubernetes 里创建一个 Etcd 集群的工作就非常简单了。
你只需要编写一个 EtcdCluster 的 YAML 文件，然后把它提交给 Kubernetes
$ kubectl apply -f example/example-etcd-cluster.yaml

这个 example-etcd-cluster.yaml 文件里描述的，是一个 3 个节点的 Etcd 集群

$ kubectl get pods
NAME                            READY     STATUS    RESTARTS   AGE
example-etcd-cluster-dp8nqtjznc   1/1       Running     0          1m
example-etcd-cluster-mbzlg6sd56   1/1       Running     0          2m
example-etcd-cluster-v6v6s6stxd   1/1       Running     0          2m

example-etcd-cluster.yaml，正是 EtcdCluster 这个 CRD 的一个具体实例，也就是一个 Custom Resource（CR）
apiVersion: "etcd.database.coreos.com/v1beta2"
kind: "EtcdCluster"
metadata:
  name: "example-etcd-cluster"
spec:
  size: 3
  version: "3.2.13"

其中，size=3 指定了它所描述的 Etcd 集群的节点个数。而 version=“3.2.13”，则指定了 Etcd 的版本。

Operator 的工作原理，实际上是利用了 Kubernetes 的自定义 API 资源（CRD），
来描述我们想要部署的“有状态应用”；然后在自定义控制器里，根据自定义 API 对象的变化，
来完成具体的部署和运维工作。

所以，编写一个 Etcd Operator，与编写一个自定义控制器的过程，没什么不同。