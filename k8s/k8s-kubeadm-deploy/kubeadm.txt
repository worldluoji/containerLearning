Kubeadm项目的目的，就是要让用户能够通过这样两条指令完成一个 Kubernetes 集群的部署：

# 创建一个Master节点
$ kubeadm init

# 将一个Node节点加入到当前集群中
$ kubeadm join <Master节点的IP和端口>


为什么不用容器部署 Kubernetes 呢？
kubelet 是 Kubernetes 项目用来操作 Docker 等容器运行时的核心组件。
可是，除了跟容器运行时打交道外，kubelet 在配置容器网络、管理容器数据卷时，都需要直接操作宿主机。
如果现在 kubelet 本身就运行在一个容器里，那么直接操作宿主机就会变得很麻烦。

kubelet 容器可以通过不开启 Network Namespace（即 Docker 的 host network 模式）的方式，直接共享宿主机的网络栈。
可是，要让 kubelet 隔着容器的 Mount Namespace 和文件系统，操作宿主机的文件系统，就有点儿困难了。

到目前为止，在容器里运行 kubelet，依然没有很好的解决办法，也不推荐用容器去部署 Kubernetes 项目。


1. 安装kubeadm
使用 kubeadm 的第一步,在机器上手动安装 kubeadm、kubelet 和 kubectl 这三个二进制文件。
kubeadm 的作者已经为各个发行版的 Linux 准备好了安装包，所以你只需要执行:
$ apt-get install kubeadm

2. 部署 Master 节点
使用“kubeadm init”部署 Master 节点。
kubeadm init的工作流程：
1）当你执行 kubeadm init 指令后，kubeadm 首先要做的，是一系列的检查工作，以确定这台机器可以用来部署 Kubernetes。
这一步检查，我们称为“Preflight Checks”，它可以为你省掉很多后续的麻烦。
2）在通过了 Preflight Checks 之后，kubeadm 要为你做的，是生成 Kubernetes 对外提供服务所需的各种证书和对应的目录。
3）证书生成后，kubeadm 接下来会为其他组件生成访问 kube-apiserver 所需的配置文件
4）接下来，kubeadm 会为 Master 组件生成 Pod 配置文件。Kubernetes 有三个 Master 组件,
kube-apiserver、kube-controller-manager、kube-scheduler，而它们都会被使用Static Pod 的方式部署起来。
5）第4步完成后，kubeadm 还会再生成一个 Etcd 的 Pod YAML 文件，用来通过同样的 Static Pod 的方式启动 Etcd。
6）Master 容器启动后，kubeadm 会通过检查 localhost:6443/healthz 这个 Master 组件的健康检查 URL，等待 Master 组件完全运行起来。
7）然后，kubeadm 就会为集群生成一个 bootstrap token。在后面，只要持有这个 token，
任何一个安装了 kubelet 和 kubadm 的节点，都可以通过 kubeadm join 加入到这个集群当中。
在 token 生成之后，kubeadm 会将 ca.crt 等 Master 节点的重要信息，通过 ConfigMap 的方式保存在 Etcd 当中，供后续部署 Node 节点使用。
这个 ConfigMap 的名字是 cluster-info。
8）kubeadm init 的最后一步，就是安装默认插件。
Kubernetes 默认 kube-proxy 和 DNS 这两个插件是必须安装的。
它们分别用来提供整个集群的服务发现和 DNS 功能。
其实，这两个插件也只是两个容器镜像而已，所以 kubeadm 只要用 Kubernetes 客户端创建两个 Pod 就可以了。

什么是Static Pod?
在 Kubernetes 中，有一种特殊的容器启动方法叫做“Static Pod”。它允许你把要部署的 Pod 的 YAML 文件放在一个指定的目录里。
这样，当这台机器上的 kubelet 启动时，它会自动检查这个目录，加载所有的 Pod YAML 文件，然后在这台机器上启动它们。
而一旦这些 YAML 文件出现在被 kubelet 监视的 /etc/kubernetes/manifests 目录下，kubelet 就会自动创建这些 YAML 文件中定义的 Pod，即 Master 组件的容器。

从这一点也可以看出，kubelet 在 Kubernetes 项目中的地位非常高，在设计上它就是一个完全独立的组件，
而其他 Master 组件，则更像是辅助性的系统容器。

3. Node节点加入
kubeadm init 生成 bootstrap token 之后，你就可以在任意一台安装了 kubelet 和 kubeadm 的机器上执行 kubeadm join 了。

为什么执行 kubeadm join 需要这样一个 token 呢？
因为，任何一台机器想要成为 Kubernetes 集群中的一个节点，就必须在集群的 kube-apiserver 上注册。
可是，要想跟 apiserver 打交道，这台机器就必须要获取到相应的证书文件（CA 文件）。
可是，为了能够一键安装，我们就不能让用户去 Master 节点上手动拷贝这些文件。

所以，kubeadm 至少需要发起一次“不安全模式”的访问到 kube-apiserver，从而拿到保存在 ConfigMap 中的 cluster-info（它保存了 APIServer 的授权信息）。
而 bootstrap token，扮演的就是这个过程中的安全验证的角色。
只要有了 cluster-info 里的 kube-apiserver 的地址、端口、证书，kubelet 就可以以“安全模式”连接到 apiserver 上，
这样一个新的节点就部署完成了。

4. kubeadm部署参数
强烈推荐你在使用 kubeadm init 部署 Master 节点时使用
$ kubeadm init --config kubeadm.yaml
这时，你就可以给 kubeadm 提供一个 YAML 文件，提供配置参数

5. 其它安装工具
除了kubeadm外，还有kubespray、Cluster API等方式创建Kubernates集群。
这里要说一下Cluster API， 首先都有一个小一点的Kubernates集群，专门做集群管理，
然后再通过声明式API，来管理另一个业务集群，
这样，通过声明式API做到集群中节点的自动扩容、节点的健康检查与自动修复、Kubernates版本升级等。