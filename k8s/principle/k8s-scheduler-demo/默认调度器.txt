1. 默认调度器的职责
在 Kubernetes 项目中，默认调度器(default scheduler)的主要职责，就是为一个新创建出来的 Pod，
寻找一个最合适的节点（Node）。

所以在具体的调度流程中，默认调度器会首先调用一组叫作 Predicate 的调度算法，来检查每个 Node。
然后，再调用一组叫作 Priority 的调度算法，来给上一步得到的结果里的每个 Node 打分。
最终的调度结果，就是得分最高的那个 Node。

Predicates 在调度过程中的作用,可以理解为 Filter，
即：它按照调度策略，从当前集群的所有节点中，“过滤”出一系列符合条件的节点。
这些节点，都是可以运行待调度 Pod 的宿主机。

调度器对一个 Pod 调度成功，实际上就是将它的 spec.nodeName 字段填上调度结果的节点名字。

2.Kubernetes 的调度器的核心
实际上就是两个相互独立的控制循环。
1）第一个控制循环，我们可以称之为 Informer Path。
它的主要目的，是启动一系列 Informer，用来监听（Watch）Etcd 中 Pod、Node、Service 等与调度相关的 API 对象的变化。
比如，当一个待调度 Pod（即：它的 nodeName 字段是空的）被创建出来之后，
调度器就会通过 Pod Informer 的 Handler，将这个待调度 Pod 添加进调度队列。

在默认情况下，Kubernetes 的调度队列是一个 PriorityQueue（优先级队列），
并且当某些集群信息发生变化的时候，调度器还会对调度队列里的内容进行一些特殊操作。
这里的设计，主要是出于调度优先级和抢占的考虑。

Kubernetes 的默认调度器还要负责对调度器缓存（即：scheduler cache）进行更新。
Kubernetes 调度部分进行性能优化的一个最根本原则，就是尽最大可能将集群信息 Cache 化，
以便从根本上提高 Predicate 和 Priority 调度算法的执行效率。


2）第二个控制循环，是调度器负责 Pod 调度的主循环，我们可以称之为 Scheduling Path。
Scheduling Path 的主要逻辑，就是不断地从调度队列里出队一个 Pod。
然后，调用 Predicates 算法进行“过滤”。
这一步“过滤”得到的一组 Node，就是所有可以运行这个 Pod 的宿主机列表。
Predicates 算法需要的 Node 信息，都是从 Scheduler Cache 里直接拿到的，这是调度器保证算法执行效率的主要手段之一。

接下来，调度器就会再调用 Priorities 算法为上述列表里的 Node 打分，分数从 0 到 10。得分最高的 Node，就会作为这次调度的结果。

调度算法执行完成后，调度器就需要将 Pod 对象的 nodeName 字段的值，修改为上述 Node 的名字。
这个步骤在 Kubernetes 里面被称作 Bind。

为了不在关键调度路径里远程访问 APIServer，Kubernetes 的默认调度器在 Bind 阶段，
只会更新 Scheduler Cache 里的 Pod 和 Node 的信息。
这种基于“乐观”假设的 API 对象更新方式，在 Kubernetes 里被称作 Assume。

Assume 之后，调度器才会创建一个 Goroutine 来异步地向 APIServer 发起更新 Pod 的请求，来真正完成 Bind 操作。
如果这次异步的 Bind 过程失败了，其实也没有太大关系，等 Scheduler Cache 同步之后一切就会恢复正常。

正是由于上述 Kubernetes 调度器的“乐观”绑定的设计，当一个新的 Pod 完成调度需要在某个节点上运行起来之前，
该节点上的 kubelet 还会通过一个叫作 Admit 的操作来再次验证该 Pod 是否确实能够运行在该节点上。
这一步 Admit 操作，实际上就是把一组叫作 GeneralPredicates 的、最基本的调度算法，
比如：“资源是否可用”“端口是否冲突”等再执行一遍，作为 kubelet 端的二次确认。

除了上述的“Cache化”和“乐观绑定”，Kubernetes 默认调度器还有一个重要的设计，那就是“无锁化”。
Kubernetes 调度器只有对调度队列和 Scheduler Cache 进行操作时，才需要加锁。
而这两部分操作，都不在 Scheduling Path 的算法执行路径上。

3. 下一步发展的方向
Kubernetes 下一步发展的方向，是组件的轻量化、接口化和插件化。
Kubernetes 的默认调度器，是目前这个项目里为数不多的、正在经历大量重构的核心组件之一。
这些正在进行的重构的目的，一方面是将默认调度器里大量的“技术债”清理干净；
另一方面，就是为默认调度器的可扩展性设计进行铺垫。
默认调度器的可扩展机制，在 Kubernetes 里面叫作 Scheduler Framework。
顾名思义，这个设计的主要目的，就是在调度器生命周期的各个关键点上，为用户暴露出可以进行扩展和实现的接口，
从而实现由用户自定义调度器的能力。
比如Predicates 部分，意味着你可以提供自己的过滤算法实现，根据自己的需求，来决定选择哪些机器。