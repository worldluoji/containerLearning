1. DaemonSet 的主要作用，是让你在 Kubernetes 集群里，运行一个 Daemon Pod。 所以，这个 Pod 有如下三个特征：
1）这个 Pod 运行在 Kubernetes集群里的每一个节点（Node）上；
2）每个节点上只有一个这样的 Pod 实例；
3）当有新的节点加入 Kubernetes 集群后，该 Pod 会自动地在新节点上被创建出来；而当旧节点被删除后，它上面的 Pod 也相应地会被回收掉。

例子：
1）各种网络插件的Agent组件，都必须运行在每一个节点上，用来处理这个节点上的容器网络；
2）各种存储插件的Agent组件，也必须运行在每一个节点上，用来在这个节点上挂载远程存储目录，操作容器的 Volume 目录；
3）各种监控组件和日志组件，也必须运行在每一个节点上，负责这个节点上的监控信息和日志搜集。

更重要的是，跟其他编排对象不一样，DaemonSet 开始运行的时机，很多时候比整个 Kubernetes 集群出现的时机都要早。

2.如何在指定的 Node 上创建新 Pod？
1）使用nodeSelector, 但不建议使用，后续该api将被k8s废弃。
nodeSelector:
    name: <Node名字>

2）使用nodeAffinity
apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: metadata.name
            operator: In
            values:
            - node-geektime

定义的 nodeAffinity 的含义是：
requiredDuringSchedulingIgnoredDuringExecution：它的意思是说，这个 nodeAffinity 必须在每次调度的时候予以考虑。
同时，这也意味着你可以设置在某些情况下不考虑这个 nodeAffinity；
这个 Pod，将来只允许运行在“metadata.name”是“node-geektime”的节点上。

应该注意到 nodeAffinity 的定义，可以支持更加丰富的语法，比如 operator: In（即：部分匹配；如果你定义 operator: Equal，就是完全匹配），这也正是 nodeAffinity 会取代 nodeSelector 的原因之一。

3. DaemonSet原理
1） DaemonSet Controller 会在创建 Pod 的时候，自动在这个 Pod 的 API 对象里，加上一个 nodeAffinity 定义。
其中，需要绑定的节点名字，正是当前正在遍历的这个 Node。

2）DaemonSet 并不需要修改用户提交的 YAML 文件里的 Pod 模板，而是在向 Kubernetes 发起请求之前，直接修改根据模板生成的 Pod 对象。

3）此外，DaemonSet 还会给这个 Pod 自动加上另外一个与调度相关的字段，叫作 tolerations。这个字段意味着这个 Pod，会“容忍”（Toleration）某些 Node 的“污点”（Taint）。
例子：
apiVersion: v1
kind: Pod
metadata:
  name: with-toleration
spec:
  tolerations:
  - key: node.kubernetes.io/unschedulable
    operator: Exists
    effect: NoSchedule
被标记了 unschedulable“污点”的 Node，是不会有任何 Pod 被调度上去的（effect: NoSchedule）。可是，DaemonSet 自动地给被管理的 Pod 加上了这个特殊的 Toleration，就使得这些 Pod 可以忽略这个限制，继而保证每个节点上都会被调度一个 Pod。当然，如果这个节点有故障的话，这个 Pod 可能会启动失败，而 DaemonSet 则会始终尝试下去，直到 Pod 启动成功。


4. 例子daemon-demo.yaml
k8s.gcr.io/fluentd-elasticsearch镜像下不到，
有人用 mirrorgooglecontainers/前头的镜像替代“科学上网”，
于是访问 https://hub.docker.com/r/镜像名/tags 来查看替代镜像的所有版本。
https://hub.docker.com/r/mirrorgooglecontainers/fluentd-elasticsearch/tags
找到了以下两个版本来做实验。
mirrorgooglecontainers/fluentd-elasticsearch:v2.0.0
mirrorgooglecontainers/fluentd-elasticsearch:v2.4.0
