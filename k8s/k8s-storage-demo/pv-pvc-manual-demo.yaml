apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-test
  labels:
    name: pv-test
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /test-volume

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: manual
      resources:
        requests:
          storage: 1Gi

# 我们为这个 StatefulSet 额外添加了一个 volumeClaimTemplates 字段。
# 它跟 Deployment 里 Pod 模板（PodTemplate）的作用类似。
# 也就是说，凡是被这个 StatefulSet 管理的 Pod，都会声明一个对应的 PVC；
# 而这个 PVC 的定义，就来自于 volumeClaimTemplates 这个模板字段。
# 更重要的是，这个 PVC 的名字，会被分配一个与这个 Pod 完全一致的编号。

# Reclaim Policy
# Current reclaim policies are:
# Retain -- manual reclamation
# Recycle -- basic scrub (rm -rf /thevolume/*) 
# Delete -- associated storage asset such as AWS EBS, GCE PD, Azure Disk, or OpenStack Cinder volume is deleted
# Currently, only NFS and HostPath support recycling. AWS EBS, GCE PD, Azure Disk, and Cinder volumes support deletion.

#注意要在woker节点创建本地目录 /test-volume
# [root@node1 pv]# kubectl get po
# NAME READY STATUS RESTARTS AGE
# web-0 1/1 Running 0 5m35s
# web-1 0/1 Pending 0 5m32s

#这些 PVC，都以“<PVC 名字 >-<StatefulSet 名字 >-< 编号 >”的方式命名，并且处于 Bound 状态。可以用过kubecetl get pvc 查看。

# kubectl delete 命令删除这两个 Pod
# $ kubectl delete pod -l app=nginx
# pod "web-0" deleted
# pod "web-1" deleted
# 在被删除之后，这两个 Pod 会被按照编号的顺序被重新创建出来


# 在被重新创建出来的Pod容器里访问http://localhost
# $ kubectl exec -it web-0 -- curl localhost
# hello web-0
# 就会发现，这个请求依然会返回：hello web-0。也就是说，原先与名叫 web-0 的 Pod 绑定的 PV，
# 在这个 Pod 被重新创建之后，依然同新的名叫 web-0 的 Pod 绑定在了一起。对于 Pod web-1 来说，也是完全一样的情况。

# 当你把一个 Pod，比如 web-0，删除之后，这个 Pod 对应的 PVC 和 PV，并不会被删除，而这个 Volume 里已经写入的数据，也依然会保存在远程存储服务里。
# 此时，StatefulSet 控制器发现，一个名叫 web-0 的 Pod 消失了。所以，控制器就会重新创建一个新的、名字还是叫作 web-0 的 Pod 来，“纠正”这个不一致的情况。


# 首先，StatefulSet 的控制器直接管理的是 Pod。这是因为，StatefulSet 里的不同 Pod 实例，
# 不再像 ReplicaSet 中那样都是完全一样的，而是有了细微区别的。比如，每个 Pod 的 hostname、名字等都是不同的、携带了编号的。
# 而 StatefulSet 区分这些实例的方式，就是通过在 Pod 的名字里加上事先约定好的编号。

# 其次，Kubernetes 通过 Headless Service，为这些有编号的 Pod，在 DNS 服务器中生成带有同样编号的 DNS 记录。
# 只要 StatefulSet 能够保证这些 Pod 名字里的编号不变，那么 Service 里类似于 web-0.nginx.default.svc.cluster.local
# 这样的 DNS 记录也就不会变，而这条记录解析出来的 Pod 的 IP 地址，则会随着后端 Pod 的删除和再创建而自动更新。
# 这当然是 Service 机制本身的能力，不需要 StatefulSet 操心。

# 最后，StatefulSet 还为每一个 Pod 分配并创建一个同样编号的 PVC。
# 这样，Kubernetes 就可以通过 Persistent Volume 机制为这个 PVC 绑定上对应的 PV，
# 从而保证了每一个 Pod 都拥有一个独立的 Volume。

# 为什么上面例子中第二个pod一直处于pending状态？
# The number of PVC is higher then the PV.

# For example if only one PV is created (or the others were deleted):
# $ kubectl get pv
# NAME             CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                      STORAGECLASS    REASON   AGE
# mongo-local-pv   50Gi       RWO            Retain           Bound    default/mongo-persistent-storage-mongo-0   local-storage            106m
# We could see that some workloads (Pods or Stateful sets) will be stuck on pending:

# $ kubectl get pods
# NAME      READY   STATUS    RESTARTS   AGE
# mongo-0   2/2     Running   0          3m38s
# mongo-1   0/2     Pending   0          3m23s

# $ kubectl get pvc
# NAME                               STATUS    VOLUME           CAPACITY   ACCESS MODES   STORAGECLASS    AGE
# mongo-persistent-storage-mongo-0   Bound     mongo-local-pv   50Gi       RWO            local-storage   80m
# mongo-persistent-storage-mongo-1   Pending                                              local-storage   45m
# We'll get the mentioned error on the pending resources.

# 解决方法：再加一个PV, 则两个POD均可正常RUNNING状态，说明hostPath类型的PV，和PVC必须一一对应。
# apiVersion: apps/v1
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: pv-test2
#   labels:
#     name: pv-test2
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: /test-volume2
