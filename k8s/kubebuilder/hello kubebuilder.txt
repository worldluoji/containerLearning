使用kubebuilder构建一个Controller

1. 创建项目
mkdir -p $GOPATH/src/helloworld
cd $GOPATH/src/helloworld
kubebuilder init --domain com.hello
--domain string            domain for groups (default "my.domain")
还有很多参数，可以kubebuilder --help查看
这里如果使用go moudule,则不必在 $GOPATH 下进行

2. 创建API(CRD和Controller)
cd $GOPATH/src/helloworld
kubebuilder create api \
--group webapp \
--version v1 \
--kind Guestbook

控制台会提醒是否创建资源(Create Resource [y/n])，输入y；
接下来控制台会提醒是否创建控制器(Create Controller [y/n])，输入y；
kubebuilder会根据上述命令新增多个文件。

3. 构建和部署CRD
cd $GOPATH/src/helloworld
make install

4. 编译和运行controller
kubebuilder自动生成的controller源码地址是：
$GOPATH/src/helloworld/controllers/guestbook_controller.go 
我们只需要修改里面的 Reconcile 方法，
这其实也就是核心业务逻辑所在之处，把实际状态调谐为期望状态的核心部分。
由于是hello项目，这里仅添加打印即可：
fmt.Println("hello kubebuilder")

执行以下命令，会编译并启动刚才修改的controller：
cd $GOPATH/src/helloworld
make run


5. 创建Guestbook资源的实例
现在kubernetes已经部署了Guestbook类型的CRD，而且对应的controller也已正在运行中，
可以尝试创建Guestbook类型的实例（CR）了(相当于有了pod的定义后，才可以创建pod)；
kubebuilder已经自动创建了一个类型的部署文件：
$GOPATH/src/helloworld/config/samples/webapp_v1_guestbook.yaml ，
cd $GOPATH/src/helloworld
kubectl apply -f config/samples/

6. 删除实例并停止controller
不再需要Guestbook实例的时候，执行以下命令即可删除：
cd $GOPATH/src/helloworld
kubectl delete -f config/samples/


7. 将controller制作成docker镜像
至此，已经体验过了kubebuilder的基本功能，不过实际生产环境中controller一般都会运行在kubernetes环境内，
像上面这种运行在kubernetes之外的方式就不合适了，咱们来试试将其做成docker镜像然后在kubernetes环境运行；
这里有个要求，就是您要有个kubernetes可以访问的镜像仓库，例如局域网内的Harbor，或者公共的hub.docker.com，
我这为了操作方便选择了hub.docker.com，使用它的前提是拥有hub.docker.com的注册帐号；
在kubebuilder电脑上，打开一个控制台，执行docker login命令登录，根据提示输入hub.docker.com的帐号和密码，
这样就可以在当前控制台上执行docker push命令将镜像推送到hub.docker.com上了；
执行以下命令构建docker镜像并推送到hub.docker.com，镜像名为hello/guestbook:001：

cd $GOPATH/src/helloworld
make docker-build docker-push IMG=hello/guestbook:001

push成功后，去hub.docker.com网站看看，新镜像已经上传，
这样只要任何机器只要能上网就能pull此镜像到本地使用了。

镜像准备好之后，执行以下命令即可在kubernetes环境部署controller：
cd $GOPATH/src/helloworld
make deploy IMG=hello/guestbook:001

控制台会提示各类资源被创建（rbac居多）,此时去看kubernetes环境的pod，发现确实已经新增了controller
这个pod实际上有两个容器，用kubectl describe命令细看，分别是kube-rbac-proxy和manager.

由于有两个容器，那么查看日志时就要指定其中一个了，咱们的controller对应的是manager容器，
因此查看日志的命令是:
kubectl logs -f \
helloworld-controller-manager-689d4b6f5b-h9pzg \
-n helloworld-system \
-c manager

再次创建Guestbook资源的实例，依旧是kubectl apply -f config/samples/命令，
再去看manager容器的日志，可见咱们修改的内容已经打印出来了。

8. 清理
体验完毕后，如果想把前面创建的资源和CRD全部清理掉，可以执行以下命令：
cd $GOPATH/src/helloworld
make uninstall

9. 目录说明
[minikuber@kube-master helloworld]$ tree -L 2
.
|-- api
|   `-- v1
|-- bin
|   |-- controller-gen
|   `-- kustomize
|-- config
|   |-- crd
|   |-- default
|   |-- manager
|   |-- prometheus
|   |-- rbac
|   `-- samples
|-- controllers
|   |-- guestbook_controller.go
|   `-- suite_test.go
|-- Dockerfile
|-- go.mod
|-- go.sum
|-- hack
|   `-- boilerplate.go.txt
|-- main.go
|-- Makefile
`-- PROJECT

1）工程新建完成后，会新增不少文件和目录，以下几个是官方提到的基础设施：
go.mod：module的配置文件，里面已经填充了几个重要依赖；
Makefile：非常重要的工具，前文咱们也用过了，编译构建、部署、运行都会用到；
PROJECT：kubebuilder工程的元数据，在生成各种API的时候会用到这里面的信息；
config/default：基于kustomize制作的配置文件，为controller提供标准配置，也可以按需要去修改调整；
config/manager：一些和manager有关的细节配置，例如镜像的资源限制；
config/rbac：顾名思义，如果像限制operator在kubernetes中的操作权限，就要通过rbac来做精细的权限配置了，这里面就是权限配置的细节；

2）main.go是kubebuilder自动生成的代码，这是operator的启动代码，大多数场景无需改动。

3）API是operator的核心，当您决定使用operator时，就应该从真实需求出发，开始设计整个CRD，
而这些设计最终体现在CRD的数据结构，以及对真实值和期望值的处理逻辑中。

[minikuber@kube-master v1]$ cat guestbook_types.go 

....
// GuestbookSpec defines the desired state of Guestbook
type GuestbookSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Foo is an example field of Guestbook. Edit guestbook_types.go to remove/update
	Foo string `json:"foo,omitempty"`
}

// GuestbookStatus defines the observed state of Guestbook
type GuestbookStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// Guestbook is the Schema for the guestbooks API
type Guestbook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GuestbookSpec   `json:"spec,omitempty"`
	Status GuestbookStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// GuestbookList contains a list of Guestbook
type GuestbookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Guestbook `json:"items"`
}

func init() {
	SchemeBuilder.Register(&Guestbook{}, &GuestbookList{})
}

metav1.TypeMeta：保存了资源的Group、Version、Kind
metav1.ObjectMeta：保存了资源对象的名称和namespace
Spec：期望状态，例如deployment在创建时指定了pod有三个副本，或者你自定义的参数等。
Status：真实状态，例如deployment在创建后只有一个副本(其他的还没有创建成功)，大多数资源对象都有此字段，
不过ConfigMap是个例外（想想也是，配置信息嘛，配成啥就是啥，没有什么期望值和真实值的说法）；
还有一个数据结构，就是Guestbook对应的列表GuestbookList，就是单个资源对象的集合；
guestbook_types.go所在目录下还有两个文件：groupversion_info.go定义了Group和Version，
以及注册到scheme时用到的实例SchemeBuilder，zz_generated.deepcopy.go用于实现实例的深拷贝.

4）controller是业务核心
Status(真实状态)是个数据结构，其字段是业务定义的，其字段值也是业务代码执行自定义的逻辑算出来的；
业务核心的目标，是确保Status与Spec达成一致，例如deployment指定了pod的副本数为3，
如果真实的pod没有三个，deployment的controller代码就去创建pod，如果真实的pod超过了三个，
deployment的controller代码就去删除pod;
以上就是咱们的controller要做的事情，接下来看看代码的细节，kubebuilder创建的guestbook_controller.go
就是controller，咱们的业务代码都写在这个文件中。
数据结构定义，操作资源对象时用到的客户端工具client.Client、日志工具、Kind和数据结构的关系Scheme，
这些都帮我们准备好了。

Reconcile方法前面有一些+kubebuilder:rbac前缀的注释，这些是用来确保controller在运行时有对应的资源操作权限。

//+kubebuilder:rbac:groups=webapp.com.hello,resources=guestbooks,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=webapp.com.hello,resources=guestbooks/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=webapp.com.hello,resources=guestbooks/finalizers,verbs=update
         
// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the Guestbook object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//  
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.11.0/pkg/reconcile
func (r *GuestbookReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
        _ = log.FromContext(ctx)
    
        // TODO(user): your logic here
        fmt.Println(fmt.Sprintf("1.%v", req))
        fmt.Println(fmt.Sprintf("2.%s", debug.Stack()))
        return ctrl.Result{}, nil
}


guestbook_controller.go是operator的业务核心，而controller的核心是其Reconcile方法，
将来咱们的大部分代码都是写在这里面的，主要做的事情就是获取status，然后让status和spec达成一致；
关于status，官方的一段描述值得重视，如下图红框，主要是说资源对象的状态应该是每次重新计算出来的，
这里以deployment为例，想知道当前有多少个pod，有两种方法：
第一种准备个字段记录，每次对pod的增加和删除都修改这个字段，于是读这个字段就知道pod数量了，
第二种方法是每次用client工具去实时查询pod数量，目前官方明确推荐使用第二种方法。


参考资料：https://xinchen.blog.csdn.net/article/details/113089414