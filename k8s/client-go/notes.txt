1. 什么是client-go
client-go是kubernetes官方提供的go语言的客户端库，go应用使用该库可以访问kubernetes的API Server，
这样我们就能通过编程来对kubernetes资源进行增删改查操作；
除了提供丰富的API用于操作kubernetes资源，client-go还为controller和operator提供了重要支持，
比如，client-go的informer机制可以将controller关注的资源变化及时带给此controller，
使controller能够及时响应变化。

2. github地址
https://github.com/kubernetes/client-go

3. 4种客户端
通过client-go提供的客户端对象与kubernetes的API Server进行交互，而client-go提供了以下四种客户端对象：

RESTClient：这是最基础的客户端对象，仅对HTTPRequest进行了封装，实现RESTFul风格API，
这个对象的使用并不方便，因为很多参数都要使用者来设置，于是client-go基于RESTClient又实现了三种新的客户端对象；

1）ClientSet：把Resource和Version也封装成方法了，用起来更简单直接，一个资源是一个客户端，
多个资源就对应了多个客户端，所以ClientSet就是多个客户端的集合了，这样就好理解了，
不过ClientSet只能访问内置资源，访问不了自定义资源；
2）DynamicClient：可以访问内置资源和自定义资源，个人感觉有点像java的集合操作，
拿出的内容是Object类型，按实际情况自己去做强制转换，当然了也会有强转失败的风险；
3）DiscoveryClient：用于发现kubernetes的API Server支持的Group、Version、Resources等信息。

4. RESTClient简介
RESTClient是client-go最基础的客户端，主要是对HTTP Reqeust进行了封装，对外提供RESTful风格的API，
并且提供丰富的API用于各种设置，相比其他几种客户端虽然更复杂，但是也更为灵活；
使用RESTClient对kubernetes的资源进行增删改查的基本步骤如下：
确定要操作的资源类型(例如查找deployment列表)，去官方API文档中找到对于的path、数据结构等信息，后面会用到；
加载配置kubernetes配置文件（和kubectl使用的那种kubeconfig完全相同）；
根据配置文件生成配置对象，并且通过API对配置对象就行设置（例如请求的path、Group、Version、序列化反序列化工具等）；
创建RESTClient实例，入参是配置对象；
调用RESTClient实例的方法向kubernetes的API Server发起请求，编码用fluent风格将各种参数传入(例如指定namespace、资源等)，
如果是查询类请求，还要传入数据结构实例的指针，改数据结构用于接受kubernetes返回的查询结果。


实战内容：查询kube-system这个namespace下的所有pod，然后在控制台打印每个pod的几个关键字段。

1）新建文件夹restclientdemo，在里面执行以下命令，新建module：
go mod init restclientdemo


2） 添加k8s.io/api和k8s.io/client-go这两个依赖，注意版本要匹配kubernetes环境：
go get k8s.io/api@v0.20.0
go get k8s.io/client-go@v0.20.0

3) 编码

-> restclientdemo

go mod tidy

go run main.go

[minikuber@kube-master restclientdemo]$ go run main.go 
namespace	 status		 name
kube-system	 Running	 coredns-65c54cc984-plv8j
kube-system	 Running	 etcd-minikube
kube-system	 Running	 kube-apiserver-minikube
kube-system	 Running	 kube-controller-manager-minikube
kube-system	 Running	 kube-proxy-d5n95
kube-system	 Running	 kube-scheduler-minikube
kube-system	 Running	 storage-provisioner

5. Clientset
kubernetes的Group和Version的每个组合，都对应Clientset数据结构的一个字段
Clientset是所有Group和Version组合对象的集合,
其实就是把我们使用RESTClient操作资源的代码按照Group和Version分类再封装而已，

内置的对象，都可以从clientset.go中找到
// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	admissionregistrationV1      *admissionregistrationv1.AdmissionregistrationV1Client
	admissionregistrationV1beta1 *admissionregistrationv1beta1.AdmissionregistrationV1beta1Client
	internalV1alpha1             *internalv1alpha1.InternalV1alpha1Client
	appsV1                       *appsv1.AppsV1Client
	appsV1beta1                  *appsv1beta1.AppsV1beta1Client
	appsV1beta2                  *appsv1beta2.AppsV1beta2Client
	authenticationV1             *authenticationv1.AuthenticationV1Client
	authenticationV1beta1        *authenticationv1beta1.AuthenticationV1beta1Client
	authorizationV1              *authorizationv1.AuthorizationV1Client
	authorizationV1beta1         *authorizationv1beta1.AuthorizationV1beta1Client
	autoscalingV1                *autoscalingv1.AutoscalingV1Client
	autoscalingV2beta1           *autoscalingv2beta1.AutoscalingV2beta1Client
	autoscalingV2beta2           *autoscalingv2beta2.AutoscalingV2beta2Client
	batchV1                      *batchv1.BatchV1Client
	batchV1beta1                 *batchv1beta1.BatchV1beta1Client
	batchV2alpha1                *batchv2alpha1.BatchV2alpha1Client
	......

以appsV1字段为例，去看看其类型appsv1.AppsV1Client(因为Deployment的apiversion: apps/v1)，
AppsV1Client只有一字段，就是咱们熟悉的restClient，所以RESTClient是Clientset的基础.
顺藤摸瓜去看DeploymentInterface，打开deployment.go文件后真相大白，接口定义的和实现一目了然，
包含了Deployment的增删查改等操作。
// DeploymentInterface has methods to work with Deployment resources.
type DeploymentInterface interface {
	Create(ctx context.Context, deployment *v1.Deployment, opts metav1.CreateOptions) (*v1.Deployment, error)
	Update(ctx context.Context, deployment *v1.Deployment, opts metav1.UpdateOptions) (*v1.Deployment, error)
	UpdateStatus(ctx context.Context, deployment *v1.Deployment, opts metav1.UpdateOptions) (*v1.Deployment, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.Deployment, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.DeploymentList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.Deployment, err error)
	GetScale(ctx context.Context, deploymentName string, options metav1.GetOptions) (*autoscalingv1.Scale, error)
	UpdateScale(ctx context.Context, deploymentName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (*autoscalingv1.Scale, error)

	DeploymentExpansion
}
.......


实战内容：
写一段代码，检查用户输入的operate参数，该参数默认是create，也可以接受clean；
如果operate参数等于create，就执行以下操作：
新建名为test-clientset的namespace
新建一个deployment，namespace为test-clientset，镜像用tomcat，副本数为2
新建一个service，namespace为test-clientset，类型是NodePort
如果operate参数等于clean，就删除create操作中创建的service、deployment、namespace等资源：
以上需求使用Clientset客户端实现，完成后咱们用浏览器访问来验证tomcat是否正常；

-> clientsetdemo

6. 参考文档
1）博客文章 https://xinchen.blog.csdn.net/article/details/113487087
2）官方文档 https://v1-19.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/