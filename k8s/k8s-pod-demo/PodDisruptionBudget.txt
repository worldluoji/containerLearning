1. PodDisruptionBudget
PodDisruptionBudget，简称PDB，是为了自主中断时保障应用的高可用。
具体来说，通过设置应用 Pod 处于正常状态的最低个数或最低百分比，这样可以保证在主动销毁 Pod 的时候，
不会销毁太多的 Pod 导致业务异常中断，从而提高业务的可用性。
比如，在进行kubectl drain操作时会根据PodDisruptionBudget控制器判断应用POD集群数量。

PDB只对自愿型中断有效，
另外，应用滚动更新时Pod的delete和unavailable虽然也属于自愿中断
但滚动更新有自己的策略控制（marSurge 和 maxUnavailable），因此PDB不会干预这个过程。

那么，什么是自愿型中断和非自愿型中断呢？

我们把这些不可避免的情况称为应用的非自愿性中断。例如：

后端节点物理机的硬件故障
集群管理员错误地删除虚拟机（实例）
云提供商或管理程序故障使虚拟机消失
内核恐慌（kernel panic）
节点由于集群网络分区而从集群中消失
由于节点资源不足而将容器逐出


除资源不足的情况外，大多数用户应该都熟悉以下这些情况；它们不是特定于 Kubernetes 的。
我们称这些情况为自愿中断。
包括由应用程序所有者发起的操作和由集群管理员发起的操作。

典型的应用程序所有者操作包括：
删除管理该 pod 的 Deployment 或其他控制器
更新了 Deployment 的 pod 模板导致 pod 重启
直接删除 pod（意外删除）

集群管理员操作包括：
排空（drain）节点进行修复或升级。
从集群中排空节点以缩小集群（了解集群自动调节）。
从节点中移除一个 pod，以允许其他 pod 使用该节点。
这些操作可能由集群管理员直接执行，也可能由集群管理员或集群托管提供商自动执行。


2. 简单使用
kubectl create poddisruptionbudget
使用指定的name、selector和所需的最小pod数量，创建一个pod disruption budget。

语法
$ poddisruptionbudget NAME --selector=SELECTOR --min-available=N [--dry-run]
示例
创建名为my-pdb的pod disruption budget，使用app = rails label ＃来选择所有po​​d，要求至少1个Pod可用：
kubectl create poddisruptionbudget my-pdb --selector=app=rails --min-available=1

创建名为my-pdb的pod disruption budget，使用app = nginx label ＃选择所有po​​d，要求至少50%Pod可用：
kubectl create pdb my-pdb --selector=app=nginx --min-available=50%

kubectl create poddisruptionbudget -h 查看其它参数

3. 实验
第一步，创建2个pod的nginx
kubectl create deployment mynginx --image=nginx --replicas=2 --dry-run=client -oyaml > nginx.yaml
kubectl apply -f nginx.yaml

第二步，创建pdb
kubectl create pdb mypdb --selector=app=mynginx --min-available=1 --dry-run=client -oyaml > nginxpdb.yaml
kubectl apply -f nginxpdb.yaml

这里有个提示：
Warning: policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
poddisruptionbudget.policy/mypdb created
是说1.21+版本，pdb的版本使用policy/v1


cat nginxpdb.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  creationTimestamp: null
  name: mypdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mynginx
status:
  currentHealthy: 0
  desiredHealthy: 0
  disruptionsAllowed: 0
  expectedPods: 0


kubectl get pdb mypdb -oyaml 可以看到,当pdb起来以后，status字段发生了变化。
是在说：当前有currentHealthy健康的pod,期望的健康pod数至少是desiredHealthy个，
disruptionsAllowed个pod可以被驱逐。
...
status:
  conditions:
  - lastTransitionTime: "2022-04-18T08:18:14Z"
    message: ""
    observedGeneration: 1
    reason: SufficientPods
    status: "True"
    type: DisruptionAllowed
  currentHealthy: 2
  desiredHealthy: 1
  disruptionsAllowed: 1
  expectedPods: 2
  observedGeneration: 1
...

第三步, 用kubectl delete快速删除两个pod
kubectl delete pod mynginx-6b78685d4d-d662b
kubectl delete pod mynginx-6b78685d4d-skqgs

这时候是可以删除成功的，这也印证了我们之前的说法，滚动更新，受deployment控制，不受pdb控制
[minikuber@kube-master pdb]$ kubectl delete pod mynginx-6b78685d4d-d662b
pod "mynginx-6b78685d4d-d662b" deleted
[minikuber@kube-master pdb]$ kubectl delete pod mynginx-6b78685d4d-skqgs
pod "mynginx-6b78685d4d-skqgs" deleted


第四步，使用kubectl drain驱逐



4. 其它
有时候我们要对一个node节点进行维修，升级，需要重启开关机，那怎么才能做到应用不影响呢？
技术：
我们可以使用 命令操作

封锁节点，先让节点变的不可调度
kubectl cordon <node name>

驱逐pod，该操作做完之后就可以进行节点升级等操作
kubectl drain <node name>

解封锁
如果要在维护操作期间将节点留在集群中，则需要运行：
kubectl uncordon <node name>
然后告诉 Kubernetes，它可以继续在此节点上调度新的Pods
