建议：使用了K8s后就不要再碰Docker相关的命令行了。
1. Pod就是K8S世界里的应用，一个应用，里面可以有多个容器组成。

2. K8S一个API对象分为METADATA和SPEC两部分，前者主要用于存放元数据，比如API对象的名字；
后者存放一些对象特有的信息，用来描述它需要表达的功能。

3. 将yaml文件运行起来
kubectl create -f nginx-deployment.yaml
希望你用 YAML 文件的方式，即：把容器的定义、参数、配置，统统记录在一个 YAML 文件中，然后用这样一句指令把它运行起来。

4.查看运行状态
NAME                               READY   STATUS    RESTARTS   AGE
nginx-deployment-6dd86d77d-24gjq   1/1     Running   0          7m30s
nginx-deployment-6dd86d77d-tq4q2   1/1     Running   0          7m30s
进一步查看某个POD的具体信息：
kubectl describe pod nginx-deployment-6dd86d77d-24gjq

5.如果修改了yaml文件内容，比如将版本进行了提升（1.7.9->1.8），那么可以使用
kubectl apply -f nginx-deployment.yaml进行处理
# 修改 nginx-deployment.yaml 的内容
$ kubectl apply -f nginx-deployment.yaml
也可以使用 $ kubectl replace -f nginx-deployment.yaml(但是不推荐)
如果手速比较快可以看到多了个一ContenerCreating：
D:\docker&k8s\action\k8s-nginx-first-demo>kubectl get pods
NAME                                READY   STATUS              RESTARTS   AGE
nginx-deployment-6dd86d77d-24gjq    1/1     Running             0          19m
nginx-deployment-6dd86d77d-tq4q2    1/1     Running             0          19m
nginx-deployment-7c96f597c8-tgb9c   0/1     ContainerCreating   0          24s
然后原来两个低版本的POD已经被取代了
D:\docker&k8s\action\k8s-nginx-first-demo>kubectl get pods
NAME                                READY   STATUS    RESTARTS   AGE
nginx-deployment-7c96f597c8-6gwbm   1/1     Running   0          33s
nginx-deployment-7c96f597c8-tgb9c   1/1     Running   0          86s
使用kubectl describe pod nginx-deployment-7c96f597c8-6gwbm  可以看到新起来的pod已经是1.8

6.指定宿主机挂载的目录
...   
    volumes:
      - name: nginx-vol
        hostPath: 
          path: /var/data
...
	volumes:
      - name: nginx-vol
        emptyDir: {}   #K8S将创建一个临时目录，挂载到容器中

7.进入POD
kubectl exec -it nginx-deployment-5c678cfb6d-lg9lw -- /bin/bash
# ls /usr/share/nginx/html

8. 删除
kubectl delete -f nginx-deployment.yaml

9. 容器编排
就是让容器照着用户希望的样子运行。实际是使用了控制循环。
go语言伪代码如下：
for {
  实际状态 := 获取集群中对象 X 的实际状态（Actual State）
  期望状态 := 获取集群中对象 X 的期望状态（Desired State）
  if 实际状态 == 期望状态{
    什么都不做
  } else {
    执行编排动作，将实际状态调整为期望状态
  }
}
实际状态来自于k8s集群本身，期望状态就是用户编写的yaml文件。


10. 需要注意的是，像这样使用一种 API 对象（Deployment）管理另一种 API 对象（Pod）的方法，在 Kubernetes 中，叫作“控制器”模式（controller pattern）。在我们的例子中，Deployment 扮演的正是 Pod 的控制器的角色。

11. kubectl get 指令的作用，就是从 Kubernetes 里面获取（GET）指定的 API 对象。可以看到，在这里我还加上了一个 -l 参数，即获取所有匹配 app: nginx 标签的 Pod。需要注意的是，在命令行中，所有 key-value 格式的参数，都使用“=”而非“:”表示。
$ kubectl get pods -l app=nginx
NAME                                READY     STATUS    RESTARTS   AGE
nginx-deployment-67594d6bf6-9gdvr   1/1       Running   0          10m
nginx-deployment-67594d6bf6-v6j7w   1/1       Running   0          10m