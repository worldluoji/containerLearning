1. Kubernetes 中所有的 API 对象，都保存在 Etcd 里。可是，对这些 API 对象的操作，
却一定都是通过访问 kube-apiserver 实现的。其中一个非常重要的原因，就是你需要 APIServer 来帮助你做授权工作。
在 Kubernetes 项目中，负责完成授权（Authorization）工作的机制，就是 RBAC。

2. RBAC的核心：
Role：角色，它其实是一组规则，定义了一组对 Kubernetes API 对象的操作权限。
Subject：被作用者，既可以是“人”，也可以是“机器”，也可以是你在 Kubernetes 里定义的“用户”。
RoleBinding：定义了“被作用者”和“角色”的绑定关系。RoleBinding 对象就可以直接通过名字，
来引用我们前面定义的 Role 对象（example-role），从而定义了“被作用者（Subject）”和“角色（Role）”之间的绑定关系。

3. Namespace 是 Kubernetes 项目里的一个逻辑管理单位。
不同 Namespace 的 API 对象，在通过 kubectl 命令进行操作的时候，是互相隔离开的。比如，kubectl get pods -n mynamespace。
当然，这仅限于逻辑上的“隔离”，Namespace 并不会提供任何实际的隔离或者多租户能力。
在前面文章中用到的大多数例子里，我都没有指定 Namespace，那就是使用的是默认 Namespace：default。

4. 对于非 Namespaced（Non-namespaced）对象（比如：Node），或者，某一个 Role 想要作用于所有的 Namespace 的时候
我们又该如何去做授权呢？这时候，我们就必须要使用 ClusterRole 和 ClusterRoleBinding 这两个组合了。
这两个 API 对象的用法跟 Role 和 RoleBinding 完全一样。只不过，它们的定义里，没有了 Namespace 字段。

5. Role的rules规则可以细化
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["my-config"]
  verbs: ["get"]
这个例子就表示，这条规则的“被作用者”，只对名叫“my-config”的 ConfigMap 对象，有进行 GET 操作的权限。

6. 在大多数时候，我们其实都不太使用“用户”这个功能，而是直接使用 Kubernetes 里的“内置用户”。
这个由 Kubernetes 负责管理的“内置用户”，正是我们前面曾经提到过的：ServiceAccount。

每个namespace默认会有一个ServiceAccount, 分配了一个secret
[minikuber@kube-master ~]$ kubectl get serviceaccount default -oyaml
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: "2022-02-17T05:59:55Z"
  name: default
  namespace: default
  resourceVersion: "423"
  uid: 676c2324-31b2-445a-8e11-1687c28668a6
secrets:
- name: default-token-vr4pt

查看这个secret
[minikuber@kube-master pod_demos]$ kubectl get secret default-token-vr4pt -oyaml
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCakNDQWU2Z0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRJeU1ESXhOakExTlRreU9Gb1hEVE15TURJeE5UQTFOVGt5T0Zvd0ZURVRNQkVHQTFVRQpBeE1LYldsdWFXdDFZbVZEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTGZiCkVmQnRUS1dlNHAwSklIUWg5a3lRU2NlcXAyVXJBUjFYdHk5L2VES2ZLcjZLSWZwNDBRNmRKZGlzd3BNenNyeFAKSU1peXhOSGdROWptUjVvTHF5OHhBQjh3WEoxQTdhUFVWZUFibmNLdzlaeEZNUGo5d0VHbzBjU3JtUDVCY0VYawpZbGxkbC94dXM0VGVhSlRqK3U5WmxLdmkrUEF6WTN3YmY4SENpeUNTQnFMN3NpTnNnbjNJK0g3UFB6b2R4aXhJCjlqMWlPT1NxUjh5N3pwVEYydTI2d1JCSEZYdUNFSEdVZ2tockZmNGdjdUxic2tNWmZhaWdtOWsrZXZTNExXYjgKV2dSQVVTbDdhbTR6MDlvd0l6SzN6cXQ3RHI0Ynp6N2VUTStpZjE5L3l1dDV3WjJlT0tmV2NibnpDS1ZLR3RnbwprbERhMm9LZm1FOWxWQzFyT05rQ0F3RUFBYU5oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVcKQkJTRC9MTmNqSSt3ZWwzcW01QnlmUVFSZUFiR0R6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFqazMzdk04cQp4dHpvSXJFaFBuaTdTT2ZJOXExNnYrY2NRNGIyM0tYbjdxWEZoWkthVk1OOHVsRzR0UW0reGliOHNwVGZGYlBqCjdkT2ROYUZVM3JEZXRnNWNFWExOb2pvbG9MY2R1dEpXMmlYWEswSi9nSWlrMTFJT093UkpNRjhVaU4zSVhOVWsKYlB2NkJaNE1jK1BGQWF0OEZJZDIvQm82SEx1OW5qZkx6ZzBVR2JLeVQ5bTJIaXl1NGZvRHNvQ3ZsaFJQSXBadApUUnNQam9OOFdQTWV2U0lhcWZlOXJmczBnNHBKNHhweXhSVTRPQi94d0JnNStwNHJBZTk2Z0JJLzZ2ZVZYTU5YCnVqZktBVEZKRUtxRlJhKzB6ZVJ4cTg0ZGZSRE52MXhGNTFHUlAvQkJ2ZHVrTjhPWUJzTTJhYzdMeG1GVnNVSjMKWTI5cFFDME84RUVRdVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  namespace: ZGVmYXVsdA==
  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklrNVVPV2Q2VVdweE1IUXpXVzVvTmt4blpFcFBUMms0UlVwcWFqUm5XV3RsZHpJNFFVTlRiR2hLYTBVaWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbVJsWm1GMWJIUXRkRzlyWlc0dGRuSTBjSFFpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pWkdWbVlYVnNkQ0lzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJalkzTm1NeU16STBMVE14WWpJdE5EUTFZUzA0WlRFeExURTJPRGRqTWpnMk5qaGhOaUlzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21SbFptRjFiSFFpZlEuV0RuaU5HV2s3c1dwTTBOcEhpeVg3OXhWcVJ1U2xRNVFCNVotNUxoUXc4el9oMDE3dzFRSkVCUkY2d29yRm5sWlJOMk1vakNxLXZqVDg4NVdQVkhpdURiRG9sbWJJVGtlb254azdsSHJNVHlFbFlPYkRVaFJmUUdUQkpzYzdza2N5SmJyVnJrYmM0QW4xbEZJLW82WHdaOTZPZVBrTWFUc2ljUW40UERqaXdoQjM2VnVsWVBxZERibHdGS2FuR3JBMUtjYmhEUnFZR3hvMnJyRFA4QlhvUEwwY0Q4dkJBeGhCRzNGTks4RC16Sy05enFWaml0VjR1N2NCekxBSWsxdTZQRGdjVjkzdE1yTXZhRXpqTDFSbk1fdU1ONGlnSmREdnJiQVYwVC1Wc29VSnRmeW9BeExVQWt3QkFILW1mYUx3VnlzWXl4bEYyQ0RNZncwN0k0REV3
kind: Secret
metadata:
  annotations:
    kubernetes.io/service-account.name: default
    kubernetes.io/service-account.uid: 676c2324-31b2-445a-8e11-1687c28668a6
  creationTimestamp: "2022-02-17T05:59:55Z"
  ...
可以看到，这个secret里就包括了ca证书，namespace, token，都是base64的，我们解码出来：
echo ZGVmYXVsdA== | base64 -d
default

token解码出来是一个jwt令牌：
eyJhbGciOiJSUzI1NiIsImtpZCI6Ik5UOWd6UWpxMHQzWW5oNkxnZEpPT2k4RUpqajRnWWtldzI4QUNTbGhKa0UifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tdnI0cHQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjY3NmMyMzI0LTMxYjItNDQ1YS04ZTExLTE2ODdjMjg2NjhhNiIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.WDniNGWk7sWpM0NpHiyX79xVqRuSlQ5QB5Z-5LhQw8z_h017w1QJEBRF6worFnlZRN2MojCq-vjT885WPVHiuDbDolmbITkeonxk7lHrMTyElYObDUhRfQGTBJsc7skcyJbrVrkbc4An1lFI-o6XwZ96OePkMaTsicQn4PDjiwhB36VulYPqdDblwFKanGrA1KcbhDRqYGxo2rrDP8BXoPL0cD8vBAxhBG3FNK8D-zK-9zqVjitV4u7cBzLAIk1u6PDgcV93tMrMvaEzjL1RnM_uMN4igJdDvrbAV0T-VsoUJtfyoAxLUAkwBAH-mfaLwVysYyxlF2CDMfw07I4DEw
这个token是从APIServer出来的，带着这个token去访问kubernates集群，APIServer就知道你是合法的。

我们启动一个pod
kubectl run mynginx --image=nginx --dry-run=client -oyaml > pod_demo1.yaml
kubectl create -f pod_demo1.yaml
kubectl get pod mynginx -oyaml 
可以看到： default的 serviceAccount 已经与pod绑定，并且为了让容器能够访问到，还在容器中挂载了serviceAccount
到/var/run/secrets/kubernetes.io/serviceaccount，这样，这个pod中的容器，就能通过该路径拿到token,去访问
APIServer, APIServer就知道它是合法的了。
...
containers:
- image: nginx
  imagePullPolicy: Always
  name: mynginx
  resources: {}
  terminationMessagePath: /dev/termination-log
  terminationMessagePolicy: File
  volumeMounts:
  - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
    name: kube-api-access-z6mzb
    readOnly: true
dnsPolicy: ClusterFirst
enableServiceLinks: true
nodeName: minikube
preemptionPolicy: PreemptLowerPriority
priority: 0
restartPolicy: Always
schedulerName: default-scheduler
securityContext: {}
serviceAccount: default
serviceAccountName: default
terminationGracePeriodSeconds: 30
tolerations:
- effect: NoExecute
  key: node.kubernetes.io/not-ready
  operator: Exists
  tolerationSeconds: 300
- effect: NoExecute
  key: node.kubernetes.io/unreachable
  operator: Exists
  tolerationSeconds: 300
volumes:
- name: kube-api-access-z6mzb
  projected:
    defaultMode: 420
    sources:
    - serviceAccountToken:
        expirationSeconds: 3607
        path: token
    - configMap:
        items:
        - key: ca.crt
          path: ca.crt
        name: kube-root-ca.crt
    - downwardAPI:
        items:
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
          path: namespace

...

7. 例子：
$ kubectl create -f svc-account.yaml
$ kubectl create -f role-binding.yaml
$ kubectl create -f role.yaml

$ kubectl get sa -n mynamespace -o yaml
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2018-09-08T12:59:17Z
    name: example-sa
    namespace: mynamespace
    resourceVersion: "409327"
    ...
  secrets:
  - name: example-sa-token-vmfg6


可以看到，Kubernetes 会为一个 ServiceAccount 自动创建并分配一个 Secret 对象，即：上述 ServiceAcount 定义里最下面的 secrets 字段。
这个 Secret，就是这个 ServiceAccount 对应的、用来跟 APIServer 进行交互的授权文件，我们一般称它为：Token。
Token 文件的内容一般是证书或者密码，它以一个 Secret 对象的方式保存在 Etcd 当中。

最后用POD声明serviceAccountName即可：
apiVersion: v1
kind: Pod
metadata:
  namespace: mynamespace
  name: sa-token-test
spec:
  containers:
  - name: nginx
    image: nginx:1.7.9
  serviceAccountName: example-sa

$ kubectl describe pod sa-token-test -n mynamespace
Name:               sa-token-test
Namespace:          mynamespace
...
Containers:
  nginx:
    ...
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from example-sa-token-vmfg6 (ro)

$ kubectl exec -it sa-token-test -n mynamespace -- /bin/bash
root@sa-token-test:/# ls /var/run/secrets/kubernetes.io/serviceaccount
ca.crt namespace  token

如上所示，容器里的应用，就可以使用这个 ca.crt 来访问 APIServer 了。
更重要的是，此时它只能够做 GET、WATCH 和 LIST 操作。因为 example-sa 这个 ServiceAccount 的权限，已经被我们绑定了 Role 做了限制。

8. k8s默认的ServiceAccount并没有关联任何 Role。也就是说，此时它有访问 APIServer 的绝大多数权限。
当然，这个访问所需要的 Token，还是默认 ServiceAccount 对应的 Secret 对象为它提供的。
$kubectl describe sa default  查看默认ServiceAccount权限。
所以，在生产环境中，我强烈建议你为所有 Namespace 下的默认 ServiceAccount，绑定一个只读权限的 Role。

9. 一个 ServiceAccount，在 Kubernetes 里对应的“用户”的名字是：
system:serviceaccount:<Namespace名字>:<ServiceAccount名字>
而对应的用户组名字就是：
system:serviceaccounts:<Namespace名字>

例子1：
subjects:
- kind: Group
  name: system:serviceaccounts:mynamespace
  apiGroup: rbac.authorization.k8s.io

这就意味着这个 Role 的权限规则，作用于 mynamespace 里的所有 ServiceAccount。这就用到了“用户组”的概念。

例子2：

subjects:
- kind: Group
  name: system:serviceaccounts
  apiGroup: rbac.authorization.k8s.io

就意味着这个 Role 的权限规则，作用于整个系统里的所有 ServiceAccount。

10. CLusterRole
Role 和 RoleBinding 对象都是 Namespaced 对象（Namespaced Object），
它们对权限的限制规则仅在它们自己的 Namespace 内有效，roleRef 也只能引用当前 Namespace 里的 Role 对象。
那么，对于非 Namespaced（Non-namespaced）对象（比如：Node），或者，
某一个 Role 想要作用于所有的 Namespace 的时候，我们又该如何去做授权呢？

这时候，我们就必须要使用 ClusterRole 和 ClusterRoleBinding 这两个组合了。
这两个 API 对象的用法跟 Role 和 RoleBinding 完全一样。只不过没有了 Namespace 字段。


kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: example-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

...

kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: example-clusterrolebinding
  subjects:
  - kind: User
    name: example-user
    apiGroup: rbac.authorization.k8s.io
  roleRef:
    kind: ClusterRole
    name: example-clusterrole
    apiGroup: rbac.authorization.k8s.io

ClusterRole 和 ClusterRoleBinding 的组合，意味着名叫 example-user 的用户，
拥有对所有 Namespace 里的 Pod 进行 GET、WATCH 和 LIST 操作的权限。

11. 在 Kubernetes 中已经内置了很多个为系统保留的 ClusterRole
它们的名字都以 system: 开头。你可以通过 kubectl get clusterroles 查看到它们。
一般来说，这些系统 ClusterRole，是绑定给 Kubernetes 系统组件对应的 ServiceAccount 使用的。
比如，其中一个名叫 system:kube-scheduler 的 ClusterRole，定义的权限规则是 kube-scheduler（Kubernetes 的调度器组件）运行所需要的必要权限。
你可以通过如下指令查看这些权限的列表：
kubectl describe clusterrole system:kube-scheduler

Kubernetes 还提供了四个预先定义好的 ClusterRole 来供用户直接使用：
cluster-admin；
admin；
edit；
view。

通过它们的名字，你应该能大致猜出它们都定义了哪些权限。
比如，这个名叫 view 的 ClusterRole，就规定了被作用者只有 Kubernetes API 的只读权限。
上面这个 cluster-admin 角色，对应的是整个 Kubernetes 项目中的最高权限（verbs=*），要慎用。